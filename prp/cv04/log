==25667== Memcheck, a memory error detector
==25667== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==25667== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==25667== Command: ./8_debug
==25667== 
==25667== Conditional jump or move depends on uninitialised value(s)
==25667==    at 0x4E814CE: vfprintf (vfprintf.c:1660)
==25667==    by 0x4E8B3D8: printf (printf.c:33)
==25667==    by 0x400584: main (8_debug.c:8)
==25667== 
==25667== Use of uninitialised value of size 8
==25667==    at 0x4E8099B: _itoa_word (_itoa.c:179)
==25667==    by 0x4E84636: vfprintf (vfprintf.c:1660)
==25667==    by 0x4E8B3D8: printf (printf.c:33)
==25667==    by 0x400584: main (8_debug.c:8)
==25667== 
==25667== Conditional jump or move depends on uninitialised value(s)
==25667==    at 0x4E809A5: _itoa_word (_itoa.c:179)
==25667==    by 0x4E84636: vfprintf (vfprintf.c:1660)
==25667==    by 0x4E8B3D8: printf (printf.c:33)
==25667==    by 0x400584: main (8_debug.c:8)
==25667== 
==25667== Conditional jump or move depends on uninitialised value(s)
==25667==    at 0x4E84682: vfprintf (vfprintf.c:1660)
==25667==    by 0x4E8B3D8: printf (printf.c:33)
==25667==    by 0x400584: main (8_debug.c:8)
==25667== 
==25667== Conditional jump or move depends on uninitialised value(s)
==25667==    at 0x4E81599: vfprintf (vfprintf.c:1660)
==25667==    by 0x4E8B3D8: printf (printf.c:33)
==25667==    by 0x400584: main (8_debug.c:8)
==25667== 
==25667== Conditional jump or move depends on uninitialised value(s)
==25667==    at 0x4E8161C: vfprintf (vfprintf.c:1660)
==25667==    by 0x4E8B3D8: printf (printf.c:33)
==25667==    by 0x400584: main (8_debug.c:8)
==25667== 
==25667== Invalid read of size 4
==25667==    at 0x40056D: main (8_debug.c:8)
==25667==  Address 0xfff001000 is not stack'd, malloc'd or (recently) free'd
==25667== 
==25667== 
==25667== Process terminating with default action of signal 11 (SIGSEGV)
==25667==  Access not within mapped region at address 0xFFF001000
==25667==    at 0x40056D: main (8_debug.c:8)
==25667==  If you believe this happened as a result of a stack
==25667==  overflow in your program's main thread (unlikely but
==25667==  possible), you can try to increase the size of the
==25667==  main thread stack using the --main-stacksize= flag.
==25667==  The main thread stack size used in this run was 8388608.
==25667== 
==25667== HEAP SUMMARY:
==25667==     in use at exit: 0 bytes in 0 blocks
==25667==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==25667== 
==25667== All heap blocks were freed -- no leaks are possible
==25667== 
==25667== For counts of detected and suppressed errors, rerun with: -v
==25667== Use --track-origins=yes to see where uninitialised values come from
==25667== ERROR SUMMARY: 45 errors from 7 contexts (suppressed: 0 from 0)
